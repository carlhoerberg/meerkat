{"name":"Meerkat","body":"Meerkat\r\n=======\r\n\r\nRack middleware for [Server-Sent Events (HTML5 SSE)](http://www.html5rocks.com/en/tutorials/eventsource/basics/).\r\n\r\nRequires an [EventMachine](https://github.com/eventmachine/eventmachine#readme) backed server, like [Thin](http://code.macournoyer.com/thin/) or [Rainbows](http://rainbows.rubyforge.org/) (with the EventMachine backend only).\r\n\r\nFeatures: \r\n\r\n* Realtime events\r\n* Extremely efficent\r\n* Broad browser support (both desktop and mobile browsers)\r\n* Works with all proxies (unlike WebSockets)\r\n* Subscribe to single events\r\n* Subscribe to multiple events via patterns\r\n* Publish messages from the server\r\n* Publish messages from the client (via POST)\r\n\r\nSupported backends: \r\n\r\n* In memory, using [EventMachine Channels](http://eventmachine.rubyforge.org/EventMachine/Channel.html), good for single server usage.\r\n* RabbitMQ (AMQP), using the [AMQP gem](https://github.com/amqp/amqp-ruby) and the Pub/Sub pattern (Topic exchange + anonymous queues with pattern matching). AMQP is the most recommened alternative.\r\n* Redis, using [em-hiredis](https://github.com/mloughran/em-hiredis#readme) and the [Pub/Sub API](http://redis.io/topics/pubsub). \r\n* Postgres, using the [Notify/Listen API](http://www.postgresql.org/docs/9.1/static/sql-notify.html). \r\n  * When a message is published the topic and json payload is inserted into the 'meerkat_pubsub' table, and then a NOTIFY is issued.\r\n  * Listening clients recivies the notification and reads the message from the table and writes it to the Event Stream of its clients.\r\n  * On the next publish all messages older than 5 seconds are deleted. \r\n  * No polling is ever done.\r\n  * This works with PostgreSQL 8 and higher (tested with 8.3 and 9.1). \r\n\r\nUsage\r\n-----\r\n\r\nPut meerkat and pg or em-hiredis in your Gemfile, depending on which backend you plan to use. \r\nGemfile:\r\n\r\n```ruby\r\ngem 'meerkat'\r\ngem 'amqp'\r\n# or\r\ngem 'pg'\r\n# or\r\ngem 'em-hiredis'\r\n```\r\nRequire meerkat and the backend you would like to use. \r\n\r\nconfig.ru: \r\n\r\n```ruby\r\nrequire 'bundler/setup'\r\nrequire 'meerkat' \r\nrequire 'meerkat/backend/amqp' \r\n#require 'meerkat/backend/pg' \r\n#require 'meerkat/backend/redis' \r\n#require 'meerkat/backend/inmemory' \r\nrequire './app'\r\n\r\n#Meerkat.backend = Meerkat::Backend::InMemory.new \r\nMeerkat.backend = Meerkat::Backend::AMQP.new 'amqp://guest:guest@localhost'\r\n#Meerkat.backend = Meerkat::Backend::Redis.new 'redis://localhost/0'\r\n#Meerkat.backend = Meerkat::Backend::PG.new :dbname => 'postgres'\r\nmap '/' do\r\n  run App\r\nend\r\nmap '/stream' do\r\n  run Meerkat::RackAdapter.new\r\nend\r\n```\r\n\r\nOn the client:\r\n\r\n```javascript\r\nvar source = new EventSource('/stream/foo');\r\nvar streamList = document.getElementById('stream');\r\n// Use #onmessage if you only listen to one topic\r\nsource.onmessage = function(e) {\r\n  var li = document.createElement('li');\r\n  li.innerHTML = JSON.parse(e.data);\r\n  streamList.appendChild(li);\r\n}\r\n\r\nvar multiSource = new EventSource('/stream/foo.*');\r\n// You have to add custom event listerns when you \r\n// listen on multiple topics\r\nmultiSource.addEventListener('foo.bar', function(e) {\r\n  // Do something\r\n}, false);\r\nmultiSource.addEventListener('foo.foo', function(e) {\r\n  // Do something\r\n}, false);\r\n```\r\n\r\nTo push things from the server:\r\n\r\n```ruby\r\nMeerkat.publish \"foo.bar\", { :any => 'hash' } # the hash will automatically be json encoded\r\nMeerkat.publish \"foo.bar\", 'any string'\r\nMeerkat.publish \"foo.foo\", myobj.to_json, true # the third parameter indicates that the message already is json encoded\r\n```\r\n\r\nThe published objects will be JSON serialized before sent to the backend. You'll have to deserialize it in the client. \r\n\r\nFrom the client:\r\n\r\n```javascript\r\n$.post('/stream', { topic: 'foo.bar', data: JSON.stringify(my_object) })\r\n$.post('/stream/foo.bar', { data: JSON.stringify(my_object) })\r\n```\r\n\r\nA simple POST request, with a parameter called 'data' (or 'json' or 'msg') containing a JSON string.\r\n\r\nThe topic can be specified other as a post parameter or in the path.\r\n\r\nRead more about Server-Sent Events and the EventSource API on [HTML5Rocks](http://www.html5rocks.com/en/tutorials/eventsource/basics/).\r\n\r\nExamples\r\n--------\r\n\r\nA simple demo can be seen here: http://meerkat-demo.herokuapp.com/\r\n\r\nIt's deployed on [Heroku's Cedar stack](http://devcenter.heroku.com/articles/cedar). It's using the AMQP backend, provided by [CloudAMQP](http://www.cloudamqp.com/) and the free Lemur plan.\r\n","tagline":"Rack middleware for Server-Sent Events (HTML5 SSE)","google":"UA-30543983-1","note":"Don't delete this file! It's used internally to help with page regeneration."}